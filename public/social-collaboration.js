// ==================== Social Sharing and Collaboration ====================
// Social media integration and collaborative features

class SocialCollaborationSystem {
    constructor() {
        this.isInitialized = false;
        this.currentSession = null;
        this.collaborators = [];
        this.sharedScenarios = JSON.parse(localStorage.getItem('sharedScenarios') || '[]');
        this.socialPlatforms = {
            twitter: { name: 'Twitter', icon: 'üê¶', color: '#1DA1F2' },
            facebook: { name: 'Facebook', icon: 'üìò', color: '#4267B2' },
            linkedin: { name: 'LinkedIn', icon: 'üíº', color: '#0077B5' },
            reddit: { name: 'Reddit', icon: 'ü§ñ', color: '#FF4500' },
            email: { name: 'Email', icon: 'üìß', color: '#34495e' }
        };
    }

    initialize() {
        if (this.isInitialized) return;
        this.isInitialized = true;
        console.log('ü§ù Social Collaboration System initialized');
    }

    shareScenario(scenarioData, platform) {
        const shareData = this.generateShareData(scenarioData);
        
        switch (platform) {
            case 'twitter':
                this.shareToTwitter(shareData);
                break;
            case 'facebook':
                this.shareToFacebook(shareData);
                break;
            case 'linkedin':
                this.shareToLinkedIn(shareData);
                break;
            case 'reddit':
                this.shareToReddit(shareData);
                break;
            case 'email':
                this.shareViaEmail(shareData);
                break;
            default:
                this.showGenericShare(shareData);
        }
    }

    generateShareData(scenarioData) {
        const impactClass = this.getImpactClassification(scenarioData.diameter);
        const energy = this.calculateEnergy(scenarioData);
        
        return {
            title: `üåç Asteroid Impact Simulation: ${impactClass.name}`,
            description: `Simulated a ${scenarioData.diameter}m asteroid impact at ${scenarioData.velocity} km/s. Energy: ${energy.toFixed(1)} MT TNT equivalent. ${impactClass.description}`,
            url: window.location.href,
            hashtags: ['AsteroidImpact', 'PlanetaryDefense', 'NASA', 'SpaceApps', 'Science'],
            data: scenarioData,
            timestamp: new Date().toISOString()
        };
    }

    getImpactClassification(diameter) {
        if (diameter < 50) return { name: 'Local Event', description: 'Minimal surface damage expected.' };
        if (diameter < 150) return { name: 'Regional Threat', description: 'Could cause significant regional damage.' };
        if (diameter < 500) return { name: 'Continental Impact', description: 'Potential for continental-scale effects.' };
        if (diameter < 1000) return { name: 'Global Catastrophe', description: 'Worldwide climate impact likely.' };
        return { name: 'Extinction Event', description: 'Civilization-ending impact scenario.' };
    }

    calculateEnergy(scenarioData) {
        const mass = (4/3) * Math.PI * Math.pow(scenarioData.diameter/2, 3) * scenarioData.density;
        const energy = 0.5 * mass * Math.pow(scenarioData.velocity * 1000, 2);
        return energy / (4.184e15); // Convert to megatons TNT
    }

    shareToTwitter(shareData) {
        const text = `${shareData.title}\n\n${shareData.description}\n\n${shareData.hashtags.map(tag => `#${tag}`).join(' ')}\n\n${shareData.url}`;
        const encodedText = encodeURIComponent(text);
        const twitterUrl = `https://twitter.com/intent/tweet?text=${encodedText}`;
        
        window.open(twitterUrl, '_blank', 'width=600,height=400');
    }

    shareToFacebook(shareData) {
        const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareData.url)}&quote=${encodeURIComponent(shareData.description)}`;
        window.open(facebookUrl, '_blank', 'width=600,height=400');
    }

    shareToLinkedIn(shareData) {
        const linkedinUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareData.url)}&title=${encodeURIComponent(shareData.title)}&summary=${encodeURIComponent(shareData.description)}`;
        window.open(linkedinUrl, '_blank', 'width=600,height=400');
    }

    shareToReddit(shareData) {
        const redditUrl = `https://reddit.com/submit?url=${encodeURIComponent(shareData.url)}&title=${encodeURIComponent(shareData.title)}`;
        window.open(redditUrl, '_blank', 'width=600,height=400');
    }

    shareViaEmail(shareData) {
        const subject = encodeURIComponent(shareData.title);
        const body = encodeURIComponent(`${shareData.description}\n\nTry the simulation yourself: ${shareData.url}\n\nGenerated by the Asteroid Impact Simulator - NASA Space Apps Challenge 2025`);
        const emailUrl = `mailto:?subject=${subject}&body=${body}`;
        
        window.location.href = emailUrl;
    }

    showGenericShare(shareData) {
        // Fallback for unsupported platforms or Web Share API
        if (navigator.share) {
            navigator.share({
                title: shareData.title,
                text: shareData.description,
                url: shareData.url
            }).catch(console.error);
        } else {
            this.showShareModal(shareData);
        }
    }

    showShareModal(shareData) {
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-black/80 flex items-center justify-center z-50';
        modal.innerHTML = `
            <div class="bg-gray-900 rounded-xl border border-blue-500/30 p-6 max-w-md w-full mx-4">
                <h3 class="text-xl font-bold text-blue-400 mb-4">üì§ Share Scenario</h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm text-gray-400 mb-2">Share URL:</label>
                        <div class="flex">
                            <input type="text" id="share-url" value="${shareData.url}" readonly 
                                   class="flex-1 bg-gray-800 text-white px-3 py-2 rounded-l border border-gray-600">
                            <button id="copy-url" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-r">
                                üìã Copy
                            </button>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm text-gray-400 mb-2">Description:</label>
                        <textarea id="share-description" readonly 
                                  class="w-full bg-gray-800 text-white px-3 py-2 rounded border border-gray-600 h-20">${shareData.description}</textarea>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-2">
                        ${Object.entries(this.socialPlatforms).map(([key, platform]) => `
                            <button class="share-platform-btn bg-gray-800 hover:bg-gray-700 text-white px-3 py-2 rounded text-sm flex items-center space-x-2" 
                                    data-platform="${key}" style="border-left: 3px solid ${platform.color}">
                                <span>${platform.icon}</span>
                                <span>${platform.name}</span>
                            </button>
                        `).join('')}
                    </div>
                </div>
                
                <div class="flex justify-end mt-6">
                    <button id="close-share-modal" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded">
                        Close
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Event listeners
        document.getElementById('copy-url').addEventListener('click', () => {
            const urlInput = document.getElementById('share-url');
            urlInput.select();
            document.execCommand('copy');
            
            const button = document.getElementById('copy-url');
            button.textContent = '‚úÖ Copied!';
            setTimeout(() => {
                button.textContent = 'üìã Copy';
            }, 2000);
        });
        
        document.querySelectorAll('.share-platform-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const platform = btn.dataset.platform;
                modal.remove();
                this.shareScenario(shareData.data, platform);
            });
        });
        
        document.getElementById('close-share-modal').addEventListener('click', () => {
            modal.remove();
        });
    }

    saveScenario(scenarioData, name, description) {
        const scenario = {
            id: Date.now().toString(),
            name: name || `Scenario ${new Date().toLocaleDateString()}`,
            description: description || 'Custom asteroid impact scenario',
            data: scenarioData,
            timestamp: new Date().toISOString(),
            author: 'Anonymous User',
            likes: 0,
            views: 0
        };
        
        this.sharedScenarios.unshift(scenario);
        this.sharedScenarios = this.sharedScenarios.slice(0, 50); // Keep only 50 scenarios
        
        localStorage.setItem('sharedScenarios', JSON.stringify(this.sharedScenarios));
        
        return scenario;
    }

    loadScenario(scenarioId) {
        const scenario = this.sharedScenarios.find(s => s.id === scenarioId);
        if (scenario) {
            // Load scenario data into simulator
            state.diameter = scenario.data.diameter;
            state.velocity = scenario.data.velocity;
            state.density = scenario.data.density;
            state.angle = scenario.data.angle;
            
            // Update UI
            updateSliderValues();
            
            // Increment view count
            scenario.views++;
            localStorage.setItem('sharedScenarios', JSON.stringify(this.sharedScenarios));
            
            return scenario;
        }
        return null;
    }

    showScenarioLibrary() {
        const libraryContainer = this.createLibraryContainer();
        this.displayScenarios();
        libraryContainer.classList.remove('hidden');
    }

    createLibraryContainer() {
        let container = document.getElementById('scenario-library-container');
        if (container) return container;
        
        container = document.createElement('div');
        container.id = 'scenario-library-container';
        container.className = 'fixed inset-0 bg-black/95 z-50 hidden overflow-y-auto p-4';
        container.innerHTML = `
            <div class="max-w-6xl mx-auto py-8">
                <div class="bg-gray-900 rounded-xl border border-green-500/30 overflow-hidden">
                    <!-- Header -->
                    <div class="bg-gradient-to-r from-green-900 to-blue-900 p-6">
                        <div class="flex justify-between items-center">
                            <div>
                                <h1 class="text-2xl font-bold text-white orbitron mb-2">üìö Scenario Library</h1>
                                <p class="text-green-200">Shared asteroid impact scenarios from the community</p>
                            </div>
                            <div class="flex space-x-2">
                                <button id="save-current-scenario" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded">
                                    üíæ Save Current
                                </button>
                                <button id="close-scenario-library" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded">
                                    ‚úï Close
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Content -->
                    <div class="p-6">
                        <div class="mb-6">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-lg font-bold text-green-400">Community Scenarios</h3>
                                <div class="text-sm text-gray-400">
                                    ${this.sharedScenarios.length} scenarios available
                                </div>
                            </div>
                            
                            <div id="scenario-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                <!-- Scenarios will be populated here -->
                            </div>
                        </div>
                        
                        <div class="text-center text-gray-400 text-sm">
                            <p>üí° Tip: Save your own scenarios to share with the community!</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(container);
        
        // Event listeners
        document.getElementById('close-scenario-library').addEventListener('click', () => {
            container.classList.add('hidden');
        });
        
        document.getElementById('save-current-scenario').addEventListener('click', () => {
            this.showSaveScenarioDialog();
        });
        
        return container;
    }

    displayScenarios() {
        const grid = document.getElementById('scenario-grid');
        
        if (this.sharedScenarios.length === 0) {
            grid.innerHTML = `
                <div class="col-span-full text-center py-8">
                    <div class="text-4xl mb-4">üåå</div>
                    <h3 class="text-xl text-gray-400 mb-2">No scenarios yet</h3>
                    <p class="text-gray-500">Be the first to save and share a scenario!</p>
                </div>
            `;
            return;
        }
        
        grid.innerHTML = this.sharedScenarios.map(scenario => {
            const impactClass = this.getImpactClassification(scenario.data.diameter);
            const energy = this.calculateEnergy(scenario.data);
            
            return `
                <div class="bg-gray-800 rounded-lg p-4 hover:bg-gray-750 transition cursor-pointer scenario-card" 
                     data-scenario-id="${scenario.id}">
                    <div class="flex justify-between items-start mb-3">
                        <h4 class="font-bold text-white truncate">${scenario.name}</h4>
                        <div class="text-xs text-gray-400">${new Date(scenario.timestamp).toLocaleDateString()}</div>
                    </div>
                    
                    <p class="text-sm text-gray-300 mb-3 line-clamp-2">${scenario.description}</p>
                    
                    <div class="space-y-2 text-xs">
                        <div class="flex justify-between">
                            <span class="text-gray-400">Size:</span>
                            <span class="text-white">${scenario.data.diameter}m</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-400">Velocity:</span>
                            <span class="text-white">${scenario.data.velocity} km/s</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-400">Energy:</span>
                            <span class="text-yellow-400">${energy.toFixed(1)} MT</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-400">Class:</span>
                            <span class="text-red-400">${impactClass.name}</span>
                        </div>
                    </div>
                    
                    <div class="flex justify-between items-center mt-4 pt-3 border-t border-gray-700">
                        <div class="flex space-x-3 text-xs text-gray-400">
                            <span>üëÅÔ∏è ${scenario.views}</span>
                            <span>‚ù§Ô∏è ${scenario.likes}</span>
                        </div>
                        <div class="flex space-x-2">
                            <button class="load-scenario-btn bg-blue-600 hover:bg-blue-700 text-white px-2 py-1 rounded text-xs" 
                                    data-scenario-id="${scenario.id}">
                                üì• Load
                            </button>
                            <button class="share-scenario-btn bg-green-600 hover:bg-green-700 text-white px-2 py-1 rounded text-xs" 
                                    data-scenario-id="${scenario.id}">
                                üì§ Share
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        // Add event listeners
        document.querySelectorAll('.load-scenario-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const scenarioId = btn.dataset.scenarioId;
                const scenario = this.loadScenario(scenarioId);
                if (scenario) {
                    document.getElementById('scenario-library-container').classList.add('hidden');
                    this.showNotification(`Loaded scenario: ${scenario.name}`, 'success');
                }
            });
        });
        
        document.querySelectorAll('.share-scenario-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const scenarioId = btn.dataset.scenarioId;
                const scenario = this.sharedScenarios.find(s => s.id === scenarioId);
                if (scenario) {
                    this.shareScenario(scenario.data, 'generic');
                }
            });
        });
    }

    showSaveScenarioDialog() {
        const dialog = document.createElement('div');
        dialog.className = 'fixed inset-0 bg-black/80 flex items-center justify-center z-60';
        dialog.innerHTML = `
            <div class="bg-gray-900 rounded-xl border border-green-500/30 p-6 max-w-md w-full mx-4">
                <h3 class="text-xl font-bold text-green-400 mb-4">üíæ Save Scenario</h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm text-gray-400 mb-2">Scenario Name:</label>
                        <input type="text" id="scenario-name" placeholder="My Asteroid Scenario" 
                               class="w-full bg-gray-800 text-white px-3 py-2 rounded border border-gray-600">
                    </div>
                    
                    <div>
                        <label class="block text-sm text-gray-400 mb-2">Description:</label>
                        <textarea id="scenario-description" placeholder="Describe your scenario..." 
                                  class="w-full bg-gray-800 text-white px-3 py-2 rounded border border-gray-600 h-20"></textarea>
                    </div>
                    
                    <div class="bg-gray-800 rounded p-3">
                        <h4 class="text-sm font-bold text-gray-300 mb-2">Current Parameters:</h4>
                        <div class="text-xs space-y-1">
                            <div>Diameter: ${state.diameter}m</div>
                            <div>Velocity: ${state.velocity} km/s</div>
                            <div>Density: ${state.density} kg/m¬≥</div>
                            <div>Angle: ${state.angle}¬∞</div>
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-2 mt-6">
                    <button id="cancel-save" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded">
                        Cancel
                    </button>
                    <button id="confirm-save" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded">
                        üíæ Save
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(dialog);
        
        document.getElementById('cancel-save').addEventListener('click', () => {
            dialog.remove();
        });
        
        document.getElementById('confirm-save').addEventListener('click', () => {
            const name = document.getElementById('scenario-name').value.trim();
            const description = document.getElementById('scenario-description').value.trim();
            
            if (!name) {
                this.showNotification('Please enter a scenario name', 'error');
                return;
            }
            
            const scenarioData = {
                diameter: state.diameter,
                velocity: state.velocity,
                density: state.density,
                angle: state.angle
            };
            
            const scenario = this.saveScenario(scenarioData, name, description);
            dialog.remove();
            
            this.showNotification(`Scenario "${scenario.name}" saved successfully!`, 'success');
            this.displayScenarios(); // Refresh the library
        });
        
        // Focus on name input
        document.getElementById('scenario-name').focus();
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 z-50 px-4 py-3 rounded-lg text-white font-medium animate-slide-in`;
        
        const colors = {
            success: 'bg-green-600',
            error: 'bg-red-600',
            info: 'bg-blue-600',
            warning: 'bg-yellow-600'
        };
        
        notification.classList.add(colors[type] || colors.info);
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 4000);
    }

    generateReport(scenarioData, impactResults) {
        const report = {
            title: 'Asteroid Impact Simulation Report',
            timestamp: new Date().toISOString(),
            scenario: scenarioData,
            results: impactResults,
            summary: this.generateSummary(scenarioData, impactResults)
        };
        
        return report;
    }

    generateSummary(scenarioData, impactResults) {
        const impactClass = this.getImpactClassification(scenarioData.diameter);
        const energy = this.calculateEnergy(scenarioData);
        
        return `
Asteroid Impact Simulation Summary
Generated on ${new Date().toLocaleDateString()}

SCENARIO PARAMETERS:
- Asteroid Diameter: ${scenarioData.diameter} meters
- Impact Velocity: ${scenarioData.velocity} km/s
- Asteroid Density: ${scenarioData.density} kg/m¬≥
- Impact Angle: ${scenarioData.angle}¬∞

IMPACT CLASSIFICATION: ${impactClass.name}
${impactClass.description}

ENERGY RELEASE: ${energy.toFixed(1)} Megatons TNT equivalent

This simulation was generated using the Asteroid Impact Simulator
NASA Space Apps Challenge 2025
        `.trim();
    }

    exportReport(report, format = 'txt') {
        const filename = `asteroid_impact_report_${new Date().toISOString().split('T')[0]}.${format}`;
        
        let content;
        if (format === 'json') {
            content = JSON.stringify(report, null, 2);
        } else {
            content = report.summary;
        }
        
        const blob = new Blob([content], { type: format === 'json' ? 'application/json' : 'text/plain' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
}

// Global instance
const socialCollaborationSystem = new SocialCollaborationSystem();
socialCollaborationSystem.initialize();

// Global functions
function shareCurrentScenario(platform) {
    const scenarioData = {
        diameter: state.diameter,
        velocity: state.velocity,
        density: state.density,
        angle: state.angle
    };
    
    socialCollaborationSystem.shareScenario(scenarioData, platform);
}

function showScenarioLibrary() {
    socialCollaborationSystem.showScenarioLibrary();
}

function exportSimulationReport() {
    const scenarioData = {
        diameter: state.diameter,
        velocity: state.velocity,
        density: state.density,
        angle: state.angle
    };
    
    const report = socialCollaborationSystem.generateReport(scenarioData, state.impactResults);
    socialCollaborationSystem.exportReport(report, 'txt');
}
